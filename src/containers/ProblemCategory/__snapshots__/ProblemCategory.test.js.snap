// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProblemCategory should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ProblemCategory
    addCategories={[Function]}
    client={
        Object {
            "name": "tony",
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <p
          className="welcome"
>
          One last step 
          tony
          ,
</p>,
        <p
          className="categories-instructions"
>
          Please select categories that match your problem.
</p>,
        <div
          className="categories"
/>,
        <div
          className="button-container"
>
          <button
                    className="previous-button"
                    onClick={[Function]}
          >
                    <img
                              className="left-arrow-img"
                              src="left_arrow.svg"
                    />
          </button>
          <button
                    className="next-button"
                    onClick={[Function]}
          >
                    <img
                              className="right-arrow-img"
                              src="right_arrow.svg"
                    />
          </button>
</div>,
      ],
      "className": "client-background",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "One last step ",
            "tony",
            ",",
          ],
          "className": "welcome",
        },
        "ref": null,
        "rendered": Array [
          "One last step ",
          "tony",
          ",",
        ],
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Please select categories that match your problem.",
          "className": "categories-instructions",
        },
        "ref": null,
        "rendered": "Please select categories that match your problem.",
        "type": "p",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": null,
          "className": "categories",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="previous-button"
              onClick={[Function]}
>
              <img
                            className="left-arrow-img"
                            src="left_arrow.svg"
              />
</button>,
            <button
              className="next-button"
              onClick={[Function]}
>
              <img
                            className="right-arrow-img"
                            src="right_arrow.svg"
              />
</button>,
          ],
          "className": "button-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                className="left-arrow-img"
                src="left_arrow.svg"
/>,
              "className": "previous-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "left-arrow-img",
                "src": "left_arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <img
                className="right-arrow-img"
                src="right_arrow.svg"
/>,
              "className": "next-button",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "right-arrow-img",
                "src": "right_arrow.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": "button",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <p
            className="welcome"
>
            One last step 
            tony
            ,
</p>,
          <p
            className="categories-instructions"
>
            Please select categories that match your problem.
</p>,
          <div
            className="categories"
/>,
          <div
            className="button-container"
>
            <button
                        className="previous-button"
                        onClick={[Function]}
            >
                        <img
                                    className="left-arrow-img"
                                    src="left_arrow.svg"
                        />
            </button>
            <button
                        className="next-button"
                        onClick={[Function]}
            >
                        <img
                                    className="right-arrow-img"
                                    src="right_arrow.svg"
                        />
            </button>
</div>,
        ],
        "className": "client-background",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "One last step ",
              "tony",
              ",",
            ],
            "className": "welcome",
          },
          "ref": null,
          "rendered": Array [
            "One last step ",
            "tony",
            ",",
          ],
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Please select categories that match your problem.",
            "className": "categories-instructions",
          },
          "ref": null,
          "rendered": "Please select categories that match your problem.",
          "type": "p",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": null,
            "className": "categories",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <button
                className="previous-button"
                onClick={[Function]}
>
                <img
                                className="left-arrow-img"
                                src="left_arrow.svg"
                />
</button>,
              <button
                className="next-button"
                onClick={[Function]}
>
                <img
                                className="right-arrow-img"
                                src="right_arrow.svg"
                />
</button>,
            ],
            "className": "button-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  className="left-arrow-img"
                  src="left_arrow.svg"
/>,
                "className": "previous-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "left-arrow-img",
                  "src": "left_arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <img
                  className="right-arrow-img"
                  src="right_arrow.svg"
/>,
                "className": "next-button",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "right-arrow-img",
                  "src": "right_arrow.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": "button",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
